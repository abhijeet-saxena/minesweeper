const e=new class{constructor(e,t,s){this.ROWS=e,this.COLUMNS=t,this.board=[],this.mines=s,this.mineLocations=new Set}init(){for(;this.mineLocations.size!==this.mines;)this.mineLocations.add(Math.floor(Math.random()*this.ROWS*this.COLUMNS));for(let e=0;e<this.ROWS;e++){const t=[];for(let s=0;s<this.COLUMNS;s++)t.push({x:e,y:s,isMine:this.mineLocations.has(this.ROWS*e+s),isRevealed:!1,value:null});this.board.push(t)}for(let e=0;e<this.ROWS;e++)for(let t=0;t<this.COLUMNS;t++)this.board[e][t].isMine||(this.board[e][t].value=this.getValueAtCell(e,t))}printBoard(){for(let e=0;e<this.ROWS;e++){let t="";for(let s=0;s<this.COLUMNS;s++)t+=`  ${this.board[e][s].isMine?"X":this.board[e][s].value}  `;console.log(`${t}\n`)}}getValueAtCell(e,t){let s=0;for(let i=-1;i<2;i++){const l=this.board[e+i];l&&(l[t-1]&&l[t-1].isMine&&(s+=1),l[t]&&l[t].isMine&&(s+=1),l[t+1]&&l[t+1].isMine&&(s+=1))}return s}getAdjacentCells(e,t){const s=[];for(let i=-1;i<2;i++){const l=this.board[e+i];if(l){let e=l[t-1],n=l[t],r=l[t+1];e&&!e.isMine&&s.push(e),0!==i&&n&&!n.isMine&&s.push(n),r&&!r.isMine&&s.push(r)}}return s}recursivelyOpenCells(e,t){let s=[],i=[this.board[e][t]];for(;i.length;){const e=i.shift(),t=this.getAdjacentCells(e.x,e.y);for(let l of t)l.isRevealed||(s.push(l),0===l.value&&i.push(l),l.isRevealed=!0)}return s}openCell(e,t){this.board[e][t].isRevealed=!0;const{isMine:s,value:i,x:l,y:n}=this.board[e][t];if(s)return{gameOver:!0,revealed:[{value:"◉",x:l,y:n}]};if(0!==i)return{gameOver:!1,revealed:[{value:i,x:l,y:n}]};return{gameOver:!1,revealed:[{value:i,x:l,y:n},...this.recursivelyOpenCells(e,t)]}}}(10,10,10);e.init();const t=document.querySelector("#board");t.addEventListener("click",(({target:s})=>{if(!s.classList.contains("cell"))return;let{x:i,y:l}=s.dataset;i=parseInt(i,10),l=parseInt(l,10);const{revealed:n,gameOver:r}=e.openCell(i,l);r&&console.log("Game Over");for(let e of n){const s=t.querySelector(`:nth-child(${10*e.x+e.y+1})`);s.classList.add("revealed"),s.innerHTML=e.value||""}}));(e=>{let s="";for(let t of e)s+=`\n    <div class="cell" data-x="${t.x}" data-y="${t.y}">\n      ${t.isRevealed?t.isMine?"◉":t.value||"":""}\n    </div>`;t.innerHTML=s})(e.board.flat());
